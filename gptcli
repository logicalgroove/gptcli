#!/usr/bin/env ruby

require "uri"
require "net/http"
require "json"
require "pathname"

def colorize(text, color = "default", bgColor = "default")
  colors = {"default" => "38","black" => "30","red" => "31","green" => "32","brown" => "33", "blue" => "34", "purple" => "35",
            "cyan" => "36", "gray" => "37", "dark gray" => "1;30", "light red" => "1;31", "light green" => "1;32", "yellow" => "1;33",
            "light blue" => "1;34", "light purple" => "1;35", "light cyan" => "1;36", "white" => "1;37"}
  bgColors = {"default" => "0", "black" => "40", "red" => "41", "green" => "42", "brown" => "43", "blue" => "44",
              "purple" => "45", "cyan" => "46", "gray" => "47", "dark gray" => "100", "light red" => "101", "light green" => "102",
              "yellow" => "103", "light blue" => "104", "light purple" => "105", "light cyan" => "106", "white" => "107"}
  color_code = colors[color]
  bgColor_code = bgColors[bgColor]
  return "\033[#{bgColor_code};#{color_code}m#{text}\033[0m"
end

dir = File.dirname(Pathname.new(__FILE__).realpath)
file = File.read("#{dir}/.env").split[0]
ENV = Hash[*file.split("=").flatten(1)]

command = if ARGV[0] == "gcm" # aka generate commit message
            "gitcommit"
          else
            "snippet"
          end

url = "https://api.openai.com/v1/completions"

if command == "gitcommit"
  diff = `git diff --unified=0 --no-color`
  branch = `git branch --show-current`.gsub("\n", "")

  prompt = 'Give me a commit message for the following changes. Return only the commit message.'
  if !['master', 'main'].include? branch
    prompt += ' Start the commit message with the task number from the branch name: ' +  branch + '.\n\n'
  else
    prompt += '\n\n'
  end
  prompt += diff
elsif command == "snippet"
  prompt = ARGV[0] + " .Return only the code."
  filename = ARGV[1] || "gpt_output-#{Time.now.strftime("%Y-%m-%d_%H:%M:%S")}.txt"
end

headers = {
  "Authorization": "Bearer #{ENV['OPENAI_ACCESS_TOKEN']}",
  "Content-Type": "application/json"
}

data = {
  model: "text-davinci-003",
  prompt: prompt,
  temperature: 0.2,
  max_tokens: 300
}

response = Net::HTTP.post(URI(url), data.to_json, headers)

json = JSON.parse(response.body)

text = json["choices"].map { |c| c["text"] }[0]

puts colorize(text, "green")
puts "\n"

File.write(filename, text) if filename

